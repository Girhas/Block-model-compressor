averages ranked:
1 file pre     (518)
2 printf       (733.6)
3 cout <<      (746.6)
4 cout premade (1102.8)

minimums ranked:
1 file pre (479)
2 cout pre (503)
3 printf   (506)
4 cout <<  (580)

Measurements are based on having no background applications running on test machine.
External CPU load significantly effects results (8x slowdown can be realistically observed) and makes
quantifiable performance evalution difficult. Therefore, an effort was made to keep external CPU load
constant and as low as possible.

Early findings suggest that writing output to file is the fastest method, however, multithreaded
approaches may make the optimal solution different. One reason for coming to this conclusion is that
std::out is usually limited to one thread per system in most cases. The exact implementation depends
on the std library for iostream and may also depend on the OS.

Currently, file writing seems to be the optimal output formatting. However, if the client requires
terminal output then printf() and std::cout appear to be competitively valuable methods.

Additionally, memory optimisation may be taking place under the hood and skewing the speed of output
formats that use premade strings. This is because the test environment uses the same string across all
10,000 iterations of printing. Hence, in practical application, we may expect that using the piping
operator << for output streams will yield better performance.